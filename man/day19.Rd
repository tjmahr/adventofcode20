% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day19.R
\name{day19}
\alias{day19}
\alias{check_messages}
\alias{check_recursive_messages}
\alias{example_message}
\title{Day 19: Monster Messages}
\usage{
check_messages(x)

check_recursive_messages(x)

example_message(example = 1)
}
\arguments{
\item{x}{some data}

\item{example}{Which example data to use (by position or name). Defaults to
1.}
}
\value{
For Part One, \code{check_messages(x)} returns whether each message
matches the rules. For Part Two, \code{check_recursive_messages(x)} returns
whether each message match the recursive rules.
}
\description{
\href{https://adventofcode.com/2020/day/19}{Monster Messages}
}
\details{
\strong{Part One}

You land in an airport surrounded by dense forest. As you walk to your
high-speed train, the Elves at the [Mythical Information
Bureau]{title="This is a purely fictional organization. Any resemblance to actual organizations, past or present, is purely coincidental."}
contact you again. They think their satellite has collected an image of
a \emph{sea monster}! Unfortunately, the connection to the satellite is
having problems, and many of the messages sent back from the satellite
have been corrupted.

They sent you a list of \emph{the rules valid messages should obey} and a
list of \emph{received messages} they\'ve collected so far (your puzzle
input).

The \emph{rules for valid messages} (the top part of your puzzle input) are
numbered and build upon each other. For example:\preformatted{0: 1 2
1: "a"
2: 1 3 | 3 1
3: "b"
}

Some rules, like \code{3: "b"}, simply match a single character (in this
case, \code{b}).

The remaining rules list the sub-rules that must be followed; for
example, the rule \verb{0: 1 2} means that to match rule \code{0}, the text being
checked must match rule \code{1}, and the text after the part that matched
rule \code{1} must then match rule \code{2}.

Some of the rules have multiple lists of sub-rules separated by a pipe
(\code{|}). This means that \emph{at least one} list of sub-rules must match. (The
ones that match might be different each time the rule is encountered.)
For example, the rule \verb{2: 1 3 | 3 1} means that to match rule \code{2}, the
text being checked must match rule \code{1} followed by rule \code{3} \emph{or} it must
match rule \code{3} followed by rule \code{1}.

Fortunately, there are no loops in the rules, so the list of possible
matches will be finite. Since rule \code{1} matches \code{a} and rule \code{3} matches
\code{b}, rule \code{2} matches either \code{ab} or \code{ba}. Therefore, rule \code{0} matches
\code{aab} or \code{aba}.

Here\'s a more interesting example:\preformatted{0: 4 1 5
1: 2 3 | 3 2
2: 4 4 | 5 5
3: 4 5 | 5 4
4: "a"
5: "b"
}

Here, because rule \code{4} matches \code{a} and rule \code{5} matches \code{b}, rule \code{2}
matches two letters that are the same (\code{aa} or \code{bb}), and rule \code{3}
matches two letters that are different (\code{ab} or \code{ba}).

Since rule \code{1} matches rules \code{2} and \code{3} once each in either order, it
must match two pairs of letters, one pair with matching letters and one
pair with different letters. This leaves eight possibilities: \code{aaab},
\code{aaba}, \code{bbab}, \code{bbba}, \code{abaa}, \code{abbb}, \code{baaa}, or \code{babb}.

Rule \code{0}, therefore, matches \code{a} (rule \code{4}), then any of the eight
options from rule \code{1}, then \code{b} (rule \code{5}): \code{aaaabb}, \code{aaabab},
\code{abbabb}, \code{abbbab}, \code{aabaab}, \code{aabbbb}, \code{abaaab}, or \code{ababbb}.

The \emph{received messages} (the bottom part of your puzzle input) need to
be checked against the rules so you can determine which are valid and
which are corrupted. Including the rules and the messages together, this
might look like:\preformatted{0: 4 1 5
1: 2 3 | 3 2
2: 4 4 | 5 5
3: 4 5 | 5 4
4: "a"
5: "b"

ababbb
bababa
abbbab
aaabbb
aaaabbb
}

Your goal is to determine \emph{the number of messages that completely match
rule \code{0}}. In the above example, \code{ababbb} and \code{abbbab} match, but
\code{bababa}, \code{aaabbb}, and \code{aaaabbb} do not, producing the answer \emph{\code{2}}.
The whole message must match all of rule \code{0}; there can\'t be extra
unmatched characters in the message. (For example, \code{aaaabbb} might
appear to match rule \code{0} above, but it has an extra unmatched \code{b} on the
end.)

\emph{How many messages completely match rule \code{0}?}

\strong{Part Two}

\strong{Part Two}
As you look over the list of messages, you realize your matching rules
aren\'t quite right. To fix them, completely replace rules \code{8: 42} and
\verb{11: 42 31} with the following:\preformatted{8: 42 | 42 8
11: 42 31 | 42 11 31
}

This small change has a big impact: now, the rules \emph{do} contain loops,
and the list of messages they could hypothetically match is infinite.
You\'ll need to determine how these changes affect which messages are
valid.

Fortunately, many of the rules are unaffected by this change; it might
help to start by looking at which rules always match the same set of
values and how \emph{those} rules (especially rules \code{42} and \code{31}) are used
by the new versions of rules \code{8} and \code{11}.

(Remember, \emph{you only need to handle the rules you have}; building a
solution that could handle any hypothetical combination of rules would
be \href{https://en.wikipedia.org/wiki/Formal_grammar}{significantly more difficult}.)

For example:\preformatted{42: 9 14 | 10 1
9: 14 27 | 1 26
10: 23 14 | 28 1
1: "a"
11: 42 31
5: 1 14 | 15 1
19: 14 1 | 14 14
12: 24 14 | 19 1
16: 15 1 | 14 14
31: 14 17 | 1 13
6: 14 14 | 1 14
2: 1 24 | 14 4
0: 8 11
13: 14 3 | 1 12
15: 1 | 14
17: 14 2 | 1 7
23: 25 1 | 22 14
28: 16 1
4: 1 1
20: 14 14 | 1 15
3: 5 14 | 16 1
27: 1 6 | 14 18
14: "b"
21: 14 1 | 1 14
25: 1 1 | 1 14
22: 14 14
8: 42
26: 14 22 | 1 20
18: 15 15
7: 14 5 | 1 21
24: 14 1

abbbbbabbbaaaababbaabbbbabababbbabbbbbbabaaaa
bbabbbbaabaabba
babbbbaabbbbbabbbbbbaabaaabaaa
aaabbbbbbaaaabaababaabababbabaaabbababababaaa
bbbbbbbaaaabbbbaaabbabaaa
bbbababbbbaaaaaaaabbababaaababaabab
ababaaaaaabaaab
ababaaaaabbbaba
baabbaaaabbaaaababbaababb
abbbbabbbbaaaababbbbbbaaaababb
aaaaabbaabaaaaababaa
aaaabbaaaabbaaa
aaaabbaabbaaaaaaabbbabbbaaabbaabaaa
babaaabbbaaabaababbaabababaaab
aabbbbbaabbbaaaaaabbbbbababaaaaabbaaabba
}

Without updating rules \code{8} and \code{11}, these rules only match three
messages: \code{bbabbbbaabaabba}, \code{ababaaaaaabaaab}, and \code{ababaaaaabbbaba}.

However, after updating rules \code{8} and \code{11}, a total of \emph{\code{12}} messages
match:
\itemize{
\item \code{bbabbbbaabaabba}
\item \code{babbbbaabbbbbabbbbbbaabaaabaaa}
\item \code{aaabbbbbbaaaabaababaabababbabaaabbababababaaa}
\item \code{bbbbbbbaaaabbbbaaabbabaaa}
\item \code{bbbababbbbaaaaaaaabbababaaababaabab}
\item \code{ababaaaaaabaaab}
\item \code{ababaaaaabbbaba}
\item \code{baabbaaaabbaaaababbaababb}
\item \code{abbbbabbbbaaaababbbbbbaaaababb}
\item \code{aaaaabbaabaaaaababaa}
\item \code{aaaabbaabbaaaaaaabbbabbbaaabbaabaaa}
\item \code{aabbbbbaabbbaaaaaabbbbbababaaaaabbaaabba}
}

\emph{After updating rules \code{8} and \code{11}, how many messages completely match
rule \code{0}?}
}
\examples{
check_messages(example_message(2))
check_messages(example_message(3))
check_recursive_messages(example_message(3))
}
