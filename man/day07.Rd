% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day07.R
\name{day07}
\alias{day07}
\alias{eval_bag_rules}
\alias{eval_shiny_gold_bag_rule}
\alias{setup_bag_environment}
\alias{parse_bag_rule_to_function}
\alias{example_bag_rules}
\title{Day 07: Handy Haversacks}
\usage{
eval_bag_rules(x, repetitions = TRUE)

eval_shiny_gold_bag_rule(x, repetitions = TRUE)

setup_bag_environment(x, repetitions = TRUE)

parse_bag_rule_to_function(rule, repetitions = TRUE)

example_bag_rules()
}
\arguments{
\item{x}{character vector of bagging rules}

\item{repetitions}{whether to change bag counts to 1 during parsing the
rules. For example, \verb{9 faded blue bags} would be treated as \verb{1 faded blue bag}. We do not need the repetitions for the part 1.}

\item{rule}{a single bag rule}
}
\value{
For Part One, \code{eval_bag_rules(x)} returns a list that says the bags
that would be opened based on each rule. For Part Two,
\code{eval_shiny_gold_bag_rule(x)} returns the bags that would be opened when a
\code{"shiny gold"} bag is opened (including itself).
}
\description{
\href{https://adventofcode.com/2020/day/7}{Handy Haversacks}
}
\details{
\strong{Part One}

You land at the regional airport in time for your next flight. In fact, it
looks like you'll even have time to grab some food: all flights are
currently delayed due to \emph{issues in luggage processing}.

Due to recent aviation regulations, many rules (your puzzle input) are being
enforced about bags and their contents; bags must be color-coded and must
contain specific quantities of other color-coded bags. Apparently, nobody
responsible for these regulations considered how long they would take to
enforce!

For example, consider the following rules:

light red bags contain 1 bright white bag, 2 muted yellow bags. dark orange
bags contain 3 bright white bags, 4 muted yellow bags. bright white bags
contain 1 shiny gold bag. muted yellow bags contain 2 shiny gold bags, 9
faded blue bags. shiny gold bags contain 1 dark olive bag, 2 vibrant plum
bags. dark olive bags contain 3 faded blue bags, 4 dotted black bags. vibrant
plum bags contain 5 faded blue bags, 6 dotted black bags. faded blue bags
contain no other bags. dotted black bags contain no other bags.

These rules specify the required contents for 9 bag types. In this example,
every \verb{faded blue} bag is empty, every \verb{vibrant plum} bag contains 11 bags (5
\verb{faded blue} and 6 \verb{dotted black}), and so on.

You have a \verb{shiny gold} bag. If you wanted to carry it in at least one other
bag, how many different bag colors would be valid for the outermost bag? (In
other words: how many colors can, eventually, contain at least one \verb{shiny gold} bag?)

In the above rules, the following options would be available to you:
\itemize{
\item A \verb{bright white} bag, which can hold your \verb{shiny gold} bag directly.
\item A \verb{muted yellow} bag, which can hold your \verb{shiny gold} bag directly, plus
some other bags.
\item A \verb{dark orange} bag, which can hold \verb{bright white} and \verb{muted yellow} bags,
either of which could then hold your \verb{shiny gold} bag.
\item A \verb{light red} bag, which can hold \verb{bright white} and \verb{muted yellow} bags,
either of which could then hold your \verb{shiny gold} bag.
}

So, in this example, the number of bag colors that can eventually contain at
least one \verb{shiny gold} bag is \code{4}.

\emph{How many bag colors can eventually contain at least one \verb{shiny gold} bag?}
(The list of rules is quite long; make sure you get all of it.)

\strong{Part Two}

It's getting pretty expensive to fly these days - not because of ticket
prices, but because of the ridiculous number of bags you need to buy!

Consider again your \verb{shiny gold} bag and the rules from the above
example:
\itemize{
\item \verb{faded blue} bags contain \code{0} other bags.
\item \verb{dotted black} bags contain \code{0} other bags.
\item \verb{vibrant plum} bags contain \code{11} other bags: 5 \verb{faded blue} bags and
6 \verb{dotted black} bags.
\item \verb{dark olive} bags contain \code{7} other bags: 3 \verb{faded blue} bags and 4
\verb{dotted black} bags.
}

So, a single \verb{shiny gold} bag must contain 1 \verb{dark olive} bag (and the 7
bags within it) plus 2 \verb{vibrant plum} bags (and the 11 bags within
\emph{each} of those): \code{1 + 1*7 + 2 + 2*11} = \code{32} bags!

Of course, the actual rules have a small ("100\%") chance of going
several levels deeper than this example; be sure to count all of the
bags, even if the nesting becomes topologically impractical!

Here's another example:\preformatted{shiny gold bags contain 2 dark red bags.
dark red bags contain 2 dark orange bags.
dark orange bags contain 2 dark yellow bags.
dark yellow bags contain 2 dark green bags.
dark green bags contain 2 dark blue bags.
dark blue bags contain 2 dark violet bags.
dark violet bags contain no other bags.
}

In this example, a single \verb{shiny gold} bag must contain \code{126} other
bags.

\emph{How many individual bags are required inside your single \verb{shiny gold}
bag?}
}
\examples{
xraw <- "
  light red bags contain 1 bright white bag, 2 muted yellow bags.
  dark orange bags contain 3 bright white bags, 4 muted yellow bags.
  bright white bags contain 1 shiny gold bag.
  muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.
  shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.
  dark olive bags contain 3 faded blue bags, 4 dotted black bags.
  vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.
  faded blue bags contain no other bags.
  dotted black bags contain no other bags.
"
x <- read_text_lines(xraw)
eval_bag_rules(x)[6]
eval_shiny_gold_bag_rule(x)
}
