% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day08.R
\name{day08}
\alias{day08}
\alias{run_boot_code_and_get_acc_value}
\alias{check_boot_lines}
\alias{setup_boot_loader}
\alias{example_boot_code}
\title{Day 08: Handheld Halting}
\usage{
run_boot_code_and_get_acc_value(x)

check_boot_lines(x)

setup_boot_loader(code, acc_value_start = 0, line_start = 1)

example_boot_code()
}
\arguments{
\item{x}{boot code instructions}

\item{acc_value_start}{starting value for the accumulator. Defaults to 0.}

\item{line_start}{startning instruction number. Defaults to 1.}
}
\value{
For Part One, \code{run_boot_code_and_get_acc_value(x)} executes the
instructions until a line is repeated and returns the final value for the
accumulator. For Part Two, \code{check_boot_lines(x)} executes different
versions of the instructions until the code terminates. It returns the
final accumulator value.
}
\description{
\href{https://adventofcode.com/2020/day/8}{Handheld Halting}
}
\details{
\strong{Part One}

Your flight to the major airline hub reaches cruising altitude without
incident. While you consider checking the in-flight menu for one of
those drinks that come with a little umbrella, you are interrupted by
the kid sitting next to you.

Their \href{https://en.wikipedia.org/wiki/Handheld_game_console}{handheld game console} won\'t
turn on! They ask if you can take a look.

You narrow the problem down to a strange \emph{infinite loop} in the [boot
code]{title="A trendy new line of encrypted footwear?"} (your puzzle
input) of the device. You should be able to fix it, but first you need
to be able to run the code in isolation.

The boot code is represented as a text file with one \emph{instruction} per
line of text. Each instruction consists of an \emph{operation} (\code{acc}, \code{jmp},
or \code{nop}) and an \emph{argument} (a signed number like \code{+4} or \code{-20}).
\itemize{
\item \code{acc} increases or decreases a single global value called the
\emph{accumulator} by the value given in the argument. For example,
\code{acc +7} would increase the accumulator by 7. The accumulator starts
at \code{0}. After an \code{acc} instruction, the instruction immediately
below it is executed next.
\item \code{jmp} \emph{jumps} to a new instruction relative to itself. The next
instruction to execute is found using the argument as an \emph{offset}
from the \code{jmp} instruction; for example, \code{jmp +2} would skip the
next instruction, \code{jmp +1} would continue to the instruction
immediately below it, and \code{jmp -20} would cause the instruction 20
lines above to be executed next.
\item \code{nop} stands for \emph{No OPeration} - it does nothing. The instruction
immediately below it is executed next.
}

For example, consider the following program:\preformatted{nop +0
acc +1
jmp +4
acc +3
jmp -3
acc -99
acc +1
jmp -4
acc +6
}

These instructions are visited in this order:\preformatted{nop +0  | 1
acc +1  | 2, 8(!)
jmp +4  | 3
acc +3  | 6
jmp -3  | 7
acc -99 |
acc +1  | 4
jmp -4  | 5
acc +6  |
}

First, the \code{nop +0} does nothing. Then, the accumulator is increased
from 0 to 1 (\code{acc +1}) and \code{jmp +4} sets the next instruction to the
other \code{acc +1} near the bottom. After it increases the accumulator from
1 to 2, \code{jmp -4} executes, setting the next instruction to the only
\code{acc +3}. It sets the accumulator to 5, and \code{jmp -3} causes the program
to continue back at the first \code{acc +1}.

This is an \emph{infinite loop}: with this sequence of jumps, the program
will run forever. The moment the program tries to run any instruction a
second time, you know it will never terminate.

Immediately \emph{before} the program would run an instruction a second time,
the value in the accumulator is \emph{\code{5}}.

Run your copy of the boot code. Immediately before any instruction is
executed a second time, \emph{what value is in the accumulator?}

\strong{Part Two}

After some careful analysis, you believe that \emph{exactly one instruction
is corrupted}.

Somewhere in the program, \emph{either} a \code{jmp} is supposed to be a \code{nop},
\emph{or} a \code{nop} is supposed to be a \code{jmp}. (No \code{acc} instructions were
harmed in the corruption of this boot code.)

The program is supposed to terminate by \emph{attempting to execute an
instruction immediately after the last instruction in the file}. By
changing exactly one \code{jmp} or \code{nop}, you can repair the boot code and
make it terminate correctly.

For example, consider the same program from above:\preformatted{nop +0
acc +1
jmp +4
acc +3
jmp -3
acc -99
acc +1
jmp -4
acc +6
}

If you change the first instruction from \code{nop +0} to \code{jmp +0}, it would
create a single-instruction infinite loop, never leaving that
instruction. If you change almost any of the \code{jmp} instructions, the
program will still eventually find another \code{jmp} instruction and loop
forever.

However, if you change the second-to-last instruction (from \code{jmp -4} to
\code{nop -4}), the program terminates! The instructions are visited in this
order:\preformatted{nop +0  | 1
acc +1  | 2
jmp +4  | 3
acc +3  |
jmp -3  |
acc -99 |
acc +1  | 4
nop -4  | 5
acc +6  | 6
}

After the last instruction (\code{acc +6}), the program terminates by
attempting to run the instruction below the last instruction in the
file. With this change, after the program terminates, the accumulator
contains the value \emph{\code{8}} (\code{acc +1}, \code{acc +1}, \code{acc +6}).

Fix the program so that it terminates normally by changing exactly one
\code{jmp} (to \code{nop}) or \code{nop} (to \code{jmp}). \emph{What is the value of the
accumulator after the program terminates?}
}
\examples{
x <- example_boot_code()
run_boot_code_and_get_acc_value(x)
check_boot_lines(x)
}
