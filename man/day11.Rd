% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day11.R
\name{day11}
\alias{day11}
\alias{simulate_ferry_seating}
\alias{update_ferry_seat_matrix}
\alias{example_ferry_seats}
\title{Day 11: Seating System}
\usage{
simulate_ferry_seating(x)

update_ferry_seat_matrix(m, coords = NULL)

example_ferry_seats(example_number = 1)
}
\arguments{
\item{x}{Character vector of ferry seatings. One string per row.}

\item{m}{Character matrix representing the seats.}

\item{example_number}{which example data to use (1 or 2). Defaults to 1.}
}
\value{
For Part One, \code{simulate_ferry_seating(x)} repeated updates the ferry
seats until they converge. For Part Two, \code{f11b(x)} returns ....
}
\description{
\href{https://adventofcode.com/2020/day/11}{Seating System}
}
\details{
\strong{Part One}

Your plane lands with plenty of time to spare. The final leg of your
journey is a ferry that goes directly to the tropical island where you
can finally start your vacation. As you reach the waiting area to board
the ferry, you realize you\'re so early, nobody else has even arrived
yet!

By modeling the process people use to choose (or abandon) their seat in
the waiting area, you\'re pretty sure you can predict the best place to
sit. You make a quick map of the seat layout (your puzzle input).

The seat layout fits neatly on a grid. Each position is either floor
(\code{.}), an empty seat (\code{L}), or an occupied seat (\verb{#}). For example, the
initial seat layout might look like this:\preformatted{L.LL.LL.LL
LLLLLLL.LL
L.L.L..L..
LLLL.LL.LL
L.LL.LL.LL
L.LLLLL.LL
..L.L.....
LLLLLLLLLL
L.LLLLLL.L
L.LLLLL.LL
}

Now, you just need to model the people who will be arriving shortly.
Fortunately, people are entirely predictable and always follow a simple
set of rules. All decisions are based on the \emph{number of occupied seats}
adjacent to a given seat (one of the eight positions immediately up,
down, left, right, or diagonal from the seat). The following rules are
applied to every seat simultaneously:
\itemize{
\item If a seat is \emph{empty} (\code{L}) and there are \emph{no} occupied seats
adjacent to it, the seat becomes \emph{occupied}.
\item If a seat is \emph{occupied} (\verb{#}) and \emph{four or more} seats adjacent to
it are also occupied, the seat becomes \emph{empty}.
\item Otherwise, the seat\'s state does not change.
}

[Floor (\code{.}) never changes]{title="Floor... floor never changes."};
seats don\'t move, and nobody sits on the floor.

After one round of these rules, every seat in the example layout becomes
occupied:\preformatted{#.##.##.##
#######.##
#.#.#..#..
####.##.##
#.##.##.##
#.#####.##
..#.#.....
##########
#.######.#
#.#####.##
}

After a second round, the seats with four or more occupied adjacent
seats become empty again:\preformatted{#.LL.L#.##
#LLLLLL.L#
L.L.L..L..
#LLL.LL.L#
#.LL.LL.LL
#.LLLL#.##
..L.L.....
#LLLLLLLL#
#.LLLLLL.L
#.#LLLL.##
}

This process continues for three more rounds:\preformatted{#.##.L#.##
#L###LL.L#
L.#.#..#..
#L##.##.L#
#.##.LL.LL
#.###L#.##
..#.#.....
#L######L#
#.LL###L.L
#.#L###.##

#.#L.L#.##
#LLL#LL.L#
L.L.L..#..
#LLL.##.L#
#.LL.LL.LL
#.LL#L#.##
..L.L.....
#L#LLLL#L#
#.LLLLLL.L
#.#L#L#.##

#.#L.L#.##
#LLL#LL.L#
L.#.L..#..
#L##.##.L#
#.#L.LL.LL
#.#L#L#.##
..L.L.....
#L#L##L#L#
#.LLLLLL.L
#.#L#L#.##
}

At this point, something interesting happens: the chaos stabilizes and
further applications of these rules cause no seats to change state! Once
people stop moving around, you count \emph{\code{37}} occupied seats.

Simulate your seating area by applying the seating rules repeatedly
until no seats change state. \emph{How many seats end up occupied?}

\strong{Part Two}

\emph{(Use have to manually add this yourself.)}

\emph{(Try using \code{convert_clipboard_html_to_roxygen_md()})}
}
\examples{
x <- example_ferry_seats(1)
simulate_ferry_seating(x)
f11b()
}
