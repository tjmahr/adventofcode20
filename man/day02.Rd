% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day02.R
\name{day02}
\alias{day02}
\alias{check_for_valid_passwords}
\alias{check_for_valider_passwords}
\title{Day 02: Password Philosophy}
\usage{
check_for_valid_passwords(x)

check_for_valider_passwords(x)
}
\arguments{
\item{x}{password data}
}
\value{
For Part One, \code{check_for_valid_passwords(x)} returns a dataframe of
parsed and validated passwords. For Part Two,
\code{check_for_valider_passwords(x)} returns a dataframe of parsed and
validated passwords.
}
\description{
\href{https://adventofcode.com/2020/day/2}{Password Philosophy}
}
\details{
\strong{Part One}

Your flight departs in a few days from the coastal airport; the easiest way
down to the coast from here is via
\href{https://en.wikipedia.org/wiki/Toboggan}{toboggan}.

The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day.
\"Something\'s wrong with our computers; we can\'t log in!\" You ask if you
can take a look.

Their password database seems to be a little corrupted: some of the passwords
wouldn\'t have been allowed by the [Official Toboggan Corporate
Policy]{title="To ensure your safety, your password must be the following
string..."} that was in effect when they were chosen.

To try to debug the problem, they have created a list (your puzzle input) of
\emph{passwords} (according to the corrupted database) and \emph{the corporate policy
when that password was set}.

For example, suppose you have the following list:

1-3 a: abcde 1-3 b: cdefg 2-9 c: ccccccccc

Each line gives the password policy and then the password. The password
policy indicates the lowest and highest number of times a given letter must
appear for the password to be valid. For example, \verb{1-3 a} means that the
password must contain \code{a} at least \code{1} time and at most \code{3} times.

In the above example, \code{2} passwords are valid. The middle password, \code{cdefg},
is not; it contains no instances of \code{b}, but needs at least \code{1}. The first
and third passwords are valid: they contain one \code{a} or nine \code{c}, both within
the limits of their respective policies.

\emph{How many passwords are valid} according to their policies?

\strong{Part Two}

While it appears you validated the passwords correctly, they don\'t seem
to be what the Official Toboggan Corporate Authentication System is
expecting.

The shopkeeper suddenly realizes that he just accidentally explained the
password policy rules from his old job at the sled rental place down the
street! The Official Toboggan Corporate Policy actually works a little
differently.

Each policy actually describes two \emph{positions in the password}, where
\code{1} means the first character, \code{2} means the second character, and so
on. (Be careful; Toboggan Corporate Policies have no concept of \"index
zero\"!) \emph{Exactly one of these positions} must contain the given letter.
Other occurrences of the letter are irrelevant for the purposes of
policy enforcement.

Given the same example list from above:
\itemize{
\item \verb{1-3 a: abcde} is \emph{valid}: position \code{1} contains \code{a} and position
\code{3} does not.
\item \verb{1-3 b: cdefg} is \emph{invalid}: neither position \code{1} nor position \code{3}
contains \code{b}.
\item \verb{2-9 c: ccccccccc} is \emph{invalid}: both position \code{2} and position \code{9}
contain \code{c}.
}

\emph{How many passwords are valid} according to the new interpretation of
the policies?
}
\examples{
input <- "
  1-3 a: abcde
  1-3 b: cdefg
  2-9 c: ccccccccc
  "

x <- read_text_lines(input)
check_for_valid_passwords(x)

check_for_valider_passwords(x)
}
