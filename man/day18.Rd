% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day18.R
\name{day18}
\alias{day18}
\alias{eval_new_math}
\alias{eval_new_new_math}
\alias{example_new_math}
\title{Day 18: Operation Order}
\usage{
eval_new_math(x)

eval_new_new_math(x)

example_new_math(example = 1)
}
\arguments{
\item{x}{some data}

\item{example}{Which example data to use (by position or name). Defaults to
1.}
}
\value{
\code{eval_new_math(x)} and \code{eval_new_new_math()} return the values of the
mathematical expressions.
}
\description{
\href{https://adventofcode.com/2020/day/18}{Operation Order}
}
\details{
\strong{Part One}

slowly appear over the horizon, you are interrupted by the child sitting
next to you. They\'re curious if you could help them with their
[math]{title="Or \"maths\", if you have more than one."} homework.

Unfortunately, it seems like this \"math\" \href{https://www.youtube.com/watch?v=3QtRK7Y2pPU&t=15}{follows different rules} than you
remember.

The homework (your puzzle input) consists of a series of expressions
that consist of addition (\code{+}), multiplication (\code{*}), and parentheses
(\code{(...)}). Just like normal math, parentheses indicate that the
expression inside must be evaluated before it can be used by the
surrounding expression. Addition still finds the sum of the numbers on
both sides of the operator, and multiplication still finds the product.

However, the rules of \emph{operator precedence} have changed. Rather than
evaluating multiplication before addition, the operators have the \emph{same
precedence}, and are evaluated left-to-right regardless of the order in
which they appear.

For example, the steps to evaluate the expression
\code{1 + 2 * 3 + 4 * 5 + 6} are as follows:\preformatted{1 + 2 * 3 + 4 * 5 + 6
  3   * 3 + 4 * 5 + 6
      9   + 4 * 5 + 6
         13   * 5 + 6
             65   + 6
                 71
}

Parentheses can override this order; for example, here is what happens
if parentheses are added to form \code{1 + (2 * 3) + (4 * (5 + 6))}:\preformatted{1 + (2 * 3) + (4 * (5 + 6))
1 +    6    + (4 * (5 + 6))
     7      + (4 * (5 + 6))
     7      + (4 *   11   )
     7      +     44
            51
}

Here are a few more examples:
\itemize{
\item \code{2 * 3 + (4 * 5)} becomes \emph{\code{26}}.
\item \code{5 + (8 * 3 + 9 + 3 * 4 * 3)} becomes \emph{\code{437}}.
\item \code{5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))} becomes \emph{\code{12240}}.
\item \code{((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2} becomes \emph{\code{13632}}.
}

Before you can help with the homework, you need to understand it
yourself. \emph{Evaluate the expression on each line of the homework; what is
the sum of the resulting values?}

\strong{Part Two}

You manage to answer the child\'s questions and they finish part 1 of
their homework, but get stuck when they reach the next section:
\emph{advanced} math.

Now, addition and multiplication have \emph{different} precedence levels, but
they\'re not the ones you\'re familiar with. Instead, addition is
evaluated \emph{before} multiplication.

For example, the steps to evaluate the expression
\code{1 + 2 * 3 + 4 * 5 + 6} are now as follows:\preformatted{1 + 2 * 3 + 4 * 5 + 6
  3   * 3 + 4 * 5 + 6
  3   *   7   * 5 + 6
  3   *   7   *  11
     21       *  11
         231
}

Here are the other examples from above:
\itemize{
\item \code{1 + (2 * 3) + (4 * (5 + 6))} still becomes \emph{\code{51}}.
\item \code{2 * 3 + (4 * 5)} becomes \emph{\code{46}}.
\item \code{5 + (8 * 3 + 9 + 3 * 4 * 3)} becomes \emph{\code{1445}}.
\item \code{5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))} becomes \emph{\code{669060}}.
\item \code{((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2} becomes \emph{\code{23340}}.
}

\emph{What do you get if you add up the results of evaluating the homework
problems using these new rules?}
}
\examples{
eval_new_math(example_new_math())
eval_new_new_math(example_new_math())
}
