% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day16.R
\name{day16}
\alias{day16}
\alias{f16a}
\alias{f16b}
\alias{example_train_tickets}
\title{Day 16: Ticket Translation}
\usage{
f16a(x)

f16b(x)

example_train_tickets(example = 1)
}
\arguments{
\item{x}{some data}

\item{example}{which example data to use. Defaults to 1.}
}
\value{
For Part One, \code{f16a(x)} returns .... For Part Two,
\code{f16b(x)} returns ....
}
\description{
\href{https://adventofcode.com/2020/day/16}{Ticket Translation}
}
\details{
\strong{Part One}

one of the legs of your re-routed trip coming up is on a high-speed
train. However, the train ticket you were given is in a language you
don\'t understand. You should probably figure out what it says before
you get to the train station after the next flight.

Unfortunately, you [can\'t actually \emph{read} the words on the
ticket]{title="This actually happened to me once, but I solved it by just asking someone."}.
You can, however, read the numbers, and so you figure out \emph{the fields
these tickets must have} and \emph{the valid ranges} for values in those
fields.

You collect the \emph{rules for ticket fields}, the \emph{numbers on your ticket},
and the \emph{numbers on other nearby tickets} for the same train service
(via the airport security cameras) together into a single document you
can reference (your puzzle input).

The \emph{rules for ticket fields} specify a list of fields that exist
\emph{somewhere} on the ticket and the \emph{valid ranges of values} for each
field. For example, a rule like \verb{class: 1-3 or 5-7} means that one of
the fields in every ticket is named \code{class} and can be any value in the
ranges \code{1-3} or \code{5-7} (inclusive, such that \code{3} and \code{5} are both valid
in this field, but \code{4} is not).

Each ticket is represented by a single line of comma-separated values.
The values are the numbers on the ticket in the order they appear; every
ticket has the same format. For example, consider this ticket:\preformatted{.--------------------------------------------------------.
| ????: 101    ?????: 102   ??????????: 103     ???: 104 |
|                                                        |
| ??: 301  ??: 302             ???????: 303      ??????? |
| ??: 401  ??: 402           ???? ????: 403    ????????? |
'--------------------------------------------------------'
}

Here, \verb{?} represents text in a language you don\'t understand. This
ticket might be represented as
\verb{101,102,103,104,301,302,303,401,402,403}; of course, the actual train
tickets you\'re looking at are \emph{much} more complicated. In any case,
you\'ve extracted just the numbers in such a way that the first number
is always the same specific field, the second number is always a
different specific field, and so on - you just don\'t know what each
position actually means!

Start by determining which tickets are \emph{completely invalid}; these are
tickets that contain values which \emph{aren\'t valid for any field}. Ignore
\emph{your ticket} for now.

For example, suppose you have the following notes:\preformatted{class: 1-3 or 5-7
row: 6-11 or 33-44
seat: 13-40 or 45-50

your ticket:
7,1,14

nearby tickets:
7,3,47
40,4,50
55,2,20
38,6,12
}

It doesn\'t matter which position corresponds to which field; you can
identify invalid \emph{nearby tickets} by considering only whether tickets
contain \emph{values that are not valid for any field}. In this example, the
values on the first \emph{nearby ticket} are all valid for at least one
field. This is not true of the other three \emph{nearby tickets}: the values
\code{4}, \code{55}, and \code{12} are are not valid for any field. Adding together all
of the invalid values produces your \emph{ticket scanning error rate}:
\code{4 + 55 + 12} = \emph{\code{71}}.

Consider the validity of the \emph{nearby tickets} you scanned. \emph{What is your
ticket scanning error rate?}

\strong{Part Two}

\emph{(Use have to manually add this yourself.)}

\emph{(Try using \code{convert_clipboard_html_to_roxygen_md()})}
}
\examples{
f16a()
f16b()
}
