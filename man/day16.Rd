% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/day16.R
\name{day16}
\alias{day16}
\alias{find_invalid_train_ticket_values}
\alias{solve_train_ticket_fields}
\alias{example_train_tickets}
\title{Day 16: Ticket Translation}
\usage{
find_invalid_train_ticket_values(x)

solve_train_ticket_fields(x)

example_train_tickets(example = 1)
}
\arguments{
\item{x}{Character vector with the train data.}

\item{example}{which example data to use. Defaults to 1.}
}
\value{
For Part One, \code{find_invalid_train_ticket_values(x)} returns a list
with the problem data which includes a field for the numbers from invalid
tickets and list of tickets with the invalid ones removed. For Part Two,
\code{solve_train_ticket_fields(x)} solves the train tickets, returning a list
with a dataframe of the ticket field constraints and a dataframe of train
tickets with the solvable fields set as column names. The first row of the
tickets dataframe is the player's ticket.
}
\description{
\href{https://adventofcode.com/2020/day/16}{Ticket Translation}
}
\details{
\strong{Part One}

one of the legs of your re-routed trip coming up is on a high-speed
train. However, the train ticket you were given is in a language you
don\'t understand. You should probably figure out what it says before
you get to the train station after the next flight.

Unfortunately, you [can\'t actually \emph{read} the words on the
ticket]{title="This actually happened to me once, but I solved it by just asking someone."}.
You can, however, read the numbers, and so you figure out \emph{the fields
these tickets must have} and \emph{the valid ranges} for values in those
fields.

You collect the \emph{rules for ticket fields}, the \emph{numbers on your ticket},
and the \emph{numbers on other nearby tickets} for the same train service
(via the airport security cameras) together into a single document you
can reference (your puzzle input).

The \emph{rules for ticket fields} specify a list of fields that exist
\emph{somewhere} on the ticket and the \emph{valid ranges of values} for each
field. For example, a rule like \verb{class: 1-3 or 5-7} means that one of
the fields in every ticket is named \code{class} and can be any value in the
ranges \code{1-3} or \code{5-7} (inclusive, such that \code{3} and \code{5} are both valid
in this field, but \code{4} is not).

Each ticket is represented by a single line of comma-separated values.
The values are the numbers on the ticket in the order they appear; every
ticket has the same format. For example, consider this ticket:\preformatted{.--------------------------------------------------------.
| ????: 101    ?????: 102   ??????????: 103     ???: 104 |
|                                                        |
| ??: 301  ??: 302             ???????: 303      ??????? |
| ??: 401  ??: 402           ???? ????: 403    ????????? |
'--------------------------------------------------------'
}

Here, \verb{?} represents text in a language you don\'t understand. This
ticket might be represented as
\verb{101,102,103,104,301,302,303,401,402,403}; of course, the actual train
tickets you\'re looking at are \emph{much} more complicated. In any case,
you\'ve extracted just the numbers in such a way that the first number
is always the same specific field, the second number is always a
different specific field, and so on - you just don\'t know what each
position actually means!

Start by determining which tickets are \emph{completely invalid}; these are
tickets that contain values which \emph{aren\'t valid for any field}. Ignore
\emph{your ticket} for now.

For example, suppose you have the following notes:\preformatted{class: 1-3 or 5-7
row: 6-11 or 33-44
seat: 13-40 or 45-50

your ticket:
7,1,14

nearby tickets:
7,3,47
40,4,50
55,2,20
38,6,12
}

It doesn\'t matter which position corresponds to which field; you can
identify invalid \emph{nearby tickets} by considering only whether tickets
contain \emph{values that are not valid for any field}. In this example, the
values on the first \emph{nearby ticket} are all valid for at least one
field. This is not true of the other three \emph{nearby tickets}: the values
\code{4}, \code{55}, and \code{12} are are not valid for any field. Adding together all
of the invalid values produces your \emph{ticket scanning error rate}:
\code{4 + 55 + 12} = \emph{\code{71}}.

Consider the validity of the \emph{nearby tickets} you scanned. \emph{What is your
ticket scanning error rate?}

\strong{Part Two}

Now that you've identified which tickets contain invalid values,
\emph{discard those tickets entirely}. Use the remaining valid tickets to
determine which field is which.

Using the valid ranges for each field, determine what order the fields
appear on the tickets. The order is consistent between all tickets: if
\code{seat} is the third field, it is the third field on every ticket,
including \emph{your ticket}.

For example, suppose you have the following notes:\preformatted{class: 0-1 or 4-19
row: 0-5 or 8-19
seat: 0-13 or 16-19

your ticket:
11,12,13

nearby tickets:
3,9,18
15,1,5
5,14,9
}

Based on the \emph{nearby tickets} in the above example, the first position
must be \code{row}, the second position must be \code{class}, and the third
position must be \code{seat}; you can conclude that in \emph{your ticket}, \code{class}
is \code{12}, \code{row} is \code{11}, and \code{seat} is \code{13}.

Once you work out which field is which, look for the six fields on \emph{your
ticket} that start with the word \code{departure}. \emph{What do you get if you
multiply those six values together?}
}
\examples{
find_invalid_train_ticket_values(example_train_tickets())
solve_train_ticket_fields(example_train_tickets(2))
}
